JTextField assigneeField = new JTextField(20);
JPopupMenu suggestionPopup = new JPopupMenu();

assigneeField.getDocument().addDocumentListener(new DocumentListener() {
    private Timer timer = new Timer(300, null); // Delay typing

    public void insertUpdate(DocumentEvent e) { scheduleSearch(); }
    public void removeUpdate(DocumentEvent e) { scheduleSearch(); }
    public void changedUpdate(DocumentEvent e) {}

    private void scheduleSearch() {
        timer.stop();
        timer.setInitialDelay(300);
        timer.setRepeats(false);
        timer.addActionListener(evt -> fetchSuggestions());
        timer.start();
    }

    private void fetchSuggestions() {
        String input = assigneeField.getText().trim();
        if (input.length() < 2) return; // wait for 2 characters

        new Thread(() -> {
            try {
                URL url = new URL("https://your-jira.com/rest/api/2/user/search?query=" + URLEncoder.encode(input, "UTF-8"));
                HttpURLConnection conn = (HttpURLConnection) url.openConnection();
                conn.setRequestProperty("Authorization", "Basic yourEncodedCredentials");
                conn.setRequestMethod("GET");

                BufferedReader in = new BufferedReader(new InputStreamReader(conn.getInputStream()));
                StringBuilder response = new StringBuilder();
                String line;
                while ((line = in.readLine()) != null) response.append(line);
                in.close();

                List<String> names = parseUserNames(response.toString());

                SwingUtilities.invokeLater(() -> {
                    suggestionPopup.removeAll();
                    for (String name : names) {
                        JMenuItem item = new JMenuItem(name);
                        item.addActionListener(e -> {
                            assigneeField.setText(name);
                            suggestionPopup.setVisible(false);
                        });
                        suggestionPopup.add(item);
                    }
                    suggestionPopup.show(assigneeField, 0, assigneeField.getHeight());
                });
            } catch (Exception ex) {
                ex.printStackTrace();
            }
        }).start();
    }

    private List<String> parseUserNames(String json) {
        List<String> names = new ArrayList<>();
        try {
            JSONArray array = new JSONArray(json);
            for (int i = 0; i < array.length(); i++) {
                JSONObject user = array.getJSONObject(i);
                names.add(user.getString("displayName"));
            }
        } catch (JSONException e) {
            e.printStackTrace();
        }
        return names;
    }
});



private void fetchSuggestions() {
        String input = assigneeField.getText().trim();
        if (input.length() < 2) return;

        SwingUtilities.invokeLater(() -> {
            try {
                String encodedInput = java.net.URLEncoder.encode(input, "UTF-8");
                String url = "https://your-jira-url/rest/api/2/user/suggestion?query=" + encodedInput;

                // Make HTTP GET request
                HttpURLConnection conn = (HttpURLConnection) new URL(url).openConnection();
                conn.setRequestMethod("GET");
                conn.setRequestProperty("Authorization", "Basic yourBase64EncodedCredentials"); // Replace securely
                conn.setRequestProperty("Content-Type", "application/json");

                BufferedReader in = new BufferedReader(new InputStreamReader(conn.getInputStream()));
                StringBuilder response = new StringBuilder();
                String line;
                while ((line = in.readLine()) != null) {
                    response.append(line);
                }
                in.close();

                // Parse JSON response
                List<String> suggestions = new ArrayList<>();
                JSONObject json = new JSONObject(response.toString());
                JSONArray users = json.getJSONArray("users");

                for (int i = 0; i < users.length(); i++) {
                    JSONObject user = users.getJSONObject(i);
                    String displayName = user.optString("displayName", "");
                    String email = user.optString("emailAddress", "");
                    String name = user.optString("name", "");

                    String formatted = String.format("%s, %s (%s)", displayName, email, name);
                    suggestions.add(formatted);
                }

                // Update JComboBox
                SwingUtilities.invokeLater(() -> {
                    assigneeDropdown.setModel(new DefaultComboBoxModel<>(suggestions.toArray(new String[0])));
                    assigneeDropdown.showPopup();
                });

            } catch (Exception ex) {
                ex.printStackTrace();
            }
        });
    }






private void fetchSuggestions() {
    String input = assigneeField.getText().trim();
    if (input.length() < 2) {
        suggestionPopup.setVisible(false);
        return;
    }

    try {
        String encoded = URLEncoder.encode(input, StandardCharsets.UTF_8.toString());
        URL url = new URL("https://your-jira-instance/rest/api/2/user/search?query=" + encoded);
        HttpURLConnection conn = (HttpURLConnection) url.openConnection();
        conn.setRequestProperty("Authorization", "Basic YOUR_ENCODED_CREDENTIALS");
        conn.setRequestMethod("GET");

        BufferedReader in = new BufferedReader(new InputStreamReader(conn.getInputStream()));
        String response = in.lines().collect(Collectors.joining());
        in.close();

        JSONObject json = new JSONObject(response);
        JSONArray users = json.getJSONArray("users");

        suggestionPopup.removeAll();

        for (int i = 0; i < users.length(); i++) {
            JSONObject user = users.getJSONObject(i);
            String display = user.getString("displayName");
            String email = user.getString("emailAddress");
            String name = user.getString("name");

            String fullText = display + ", " + email + " (" + name + ")";
            JMenuItem item = new JMenuItem(fullText);
            item.addActionListener(e -> {
                assigneeField.setText(name); // Or set fullText if you prefer
                suggestionPopup.setVisible(false);
            });
            suggestionPopup.add(item);
        }

        if (users.length() > 0) {
            suggestionPopup.show(assigneeField, 0, assigneeField.getHeight());
        }

    } catch (Exception ex) {
        ex.printStackTrace();
        suggestionPopup.setVisible(false);
    }
}





// At class level
private DocumentListener assigneeListener;

private void setupAssigneeSuggestions() {
    assigneeListener = new DocumentListener() {
        @Override
        public void insertUpdate(DocumentEvent e) {
            fetchSuggestions();
        }

        @Override
        public void removeUpdate(DocumentEvent e) {
            fetchSuggestions();
        }

        @Override
        public void changedUpdate(DocumentEvent e) {
            fetchSuggestions();
        }
    };
    assigneeField.getDocument().addDocumentListener(assigneeListener);
}

item.addActionListener(e -> {
    assigneeField.getDocument().removeDocumentListener(assigneeListener); // ðŸ‘ˆ Stop triggering

    assigneeField.setText(name); // Set only the username
    suggestionPopup.setVisible(false); // Hide popup

    // Optional: Give some delay before re-adding listener to avoid re-triggering
    SwingUtilities.invokeLater(() -> {
        assigneeField.getDocument().addDocumentListener(assigneeListener); // ðŸ‘ˆ Add back
    });
});

