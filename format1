private void setAssigneeViewHeaders() {
    // Set column headers for Assignee View
    String[] assigneeColumns = {"Assignee", "Fix Version", "Total Tasks", "Total Log Seconds", "Total Log Estimate", "Estimate v/s Logged", "Total Story Points"};
    tableModel.setColumnIdentifiers(assigneeColumns);  // Set the column headers for Assignee View
}

private void setKBViewHeaders() {
    // Set column headers for KB_Scrum View
    String[] kbScrumColumns = {"KB_SCRUM_TEAM", "Fix Version", "Total Keys", "Total Log Seconds", "Total Log Estimate", "Estimate v/s Logged", "Total Story Points", "Total Resources Worked"};
    tableModel.setColumnIdentifiers(kbScrumColumns);  // Set the column headers for KB_Scrum View
}





private void setAssigneeViewColumnWidths() {
    // Set preferred width for each column for Assignee View
    dataTable.getColumnModel().getColumn(0).setPreferredWidth(150);  // Assignee column width
    dataTable.getColumnModel().getColumn(1).setPreferredWidth(100);  // Fix Version column width
    dataTable.getColumnModel().getColumn(2).setPreferredWidth(120);  // Total Tasks column width
    dataTable.getColumnModel().getColumn(3).setPreferredWidth(150);  // Total Log Seconds column width
    dataTable.getColumnModel().getColumn(4).setPreferredWidth(150);  // Total Log Estimate column width
    dataTable.getColumnModel().getColumn(5).setPreferredWidth(150);  // Estimate v/s Logged column width
    dataTable.getColumnModel().getColumn(6).setPreferredWidth(150);  // Total Story Points column width
}

private void setKBViewColumnWidths() {
    // Set preferred width for each column for KB_Scrum View
    dataTable.getColumnModel().getColumn(0).setPreferredWidth(180);  // KB_SCRUM_TEAM column width
    dataTable.getColumnModel().getColumn(1).setPreferredWidth(120);  // Fix Version column width
    dataTable.getColumnModel().getColumn(2).setPreferredWidth(130);  // Total Keys column width
    dataTable.getColumnModel().getColumn(3).setPreferredWidth(150);  // Total Log Seconds column width
    dataTable.getColumnModel().getColumn(4).setPreferredWidth(150);  // Total Log Estimate column width
    dataTable.getColumnModel().getColumn(5).setPreferredWidth(150);  // Estimate v/s Logged column width
    dataTable.getColumnModel().getColumn(6).setPreferredWidth(150);  // Total Story Points column width
    dataTable.getColumnModel().getColumn(7).setPreferredWidth(150);  // Total Resources Worked column width
}


private void setTableCellRenderer() {
    // Custom cell renderer for centering text and applying colors
    dataTable.setDefaultRenderer(Object.class, new DefaultTableCellRenderer() {
        @Override
        public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
            // Get the default component from JTable's renderer (this is a JLabel)
            JLabel label = (JLabel) super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);

            // Check if the column is not the first column (Assignee)
            if (column != 0) {
                // Center all values except the first column (Assignee)
                label.setHorizontalAlignment(SwingConstants.CENTER);
            } else {
                // Left align the first column (Assignee)
                label.setHorizontalAlignment(SwingConstants.LEFT);
            }

            // If it's the "Estimate v/s Logged" column (column 5)
            if (column == 5) {
                String cellValue = (String) value;

                // Check if the value ends with '%' (percentage) and handle it accordingly
                if (cellValue.endsWith("%") && !cellValue.equals("0%")) {
                    // Remove the '%' sign and parse the remaining value to double
                    double percentage = Double.parseDouble(cellValue.substring(0, cellValue.length() - 1));

                    // If the percentage is less than 95%, set the background to light red and text to dark red
                    if (percentage < 95) {
                        label.setBackground(Color.LIGHT_GRAY);  // Light red background
                        label.setForeground(Color.RED);        // Dark red text color
                    } else {
                        label.setBackground(Color.WHITE);      // White background
                        label.setForeground(Color.BLACK);      // Black text color
                    }
                } else {
                    // For "0%" or non-percentage values
                    label.setBackground(Color.WHITE);      // White background
                    label.setForeground(Color.BLACK);      // Black text color
                }
            }

            // If it's the last row (total row), highlight it with blue
            if (row == table.getRowCount() - 1) {
                label.setBackground(Color.BLUE);        // Set background to blue for the total row
                label.setForeground(Color.WHITE);       // White text for the total row
            }

            return label;
        }
    });
}
