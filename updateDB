public boolean updateJiraDetails(String key, 
                                 String newSummary, String originalSummary,
                                 String newStatus, String originalStatus,
                                 String newTimeSpent, String originalTimeSpent) {
    StringBuilder sql = new StringBuilder("UPDATE jiratable SET ");
    List<String> updateFields = new ArrayList<>();
    List<Object> params = new ArrayList<>();

    // Summary
    if (!Objects.equals(newSummary, originalSummary)) {
        updateFields.add("summary = ?");
        params.add(newSummary);
    }

    // Status
    if (!Objects.equals(newStatus, originalStatus)) {
        updateFields.add("status = ?");
        params.add(newStatus);
    }

    // Time Spent
    if (!Objects.equals(newTimeSpent, originalTimeSpent)) {
        try {
            double timeValue = Double.parseDouble(newTimeSpent.trim());
            updateFields.add("time_spent = ?");
            params.add(timeValue);
        } catch (NumberFormatException e) {
            System.err.println("Invalid time_spent format. Skipping DB update.");
            return false;
        }
    }

    // No fields changed
    if (updateFields.isEmpty()) {
        return false;
    }

    // Build SQL
    sql.append(String.join(", ", updateFields));
    sql.append(" WHERE key = ?");
    params.add(key); // last param is for WHERE clause

    // DB Execution
    try (Connection conn = getConnection();
         PreparedStatement stmt = conn.prepareStatement(sql.toString())) {

        for (int i = 0; i < params.size(); i++) {
            stmt.setObject(i + 1, params.get(i));
        }

        int updated = stmt.executeUpdate();
        return updated > 0;

    } catch (SQLException e) {
        e.printStackTrace();
        return false;
    }
}


String query = "SELECT key, summary, status, art, time_spent, epic FROM jiradata WHERE assignee = ?";

try (PreparedStatement pstmt = conn.prepareStatement(query)) {
    pstmt.setString(1, assignee); // make sure 'assignee' is a valid String variable

    try (ResultSet rs = pstmt.executeQuery()) {
        while (rs.next()) {
            Object[] row = new Object[]{
                rs.getString("key"),
                rs.getString("summary"),
                rs.getString("status"),
                rs.getString("art"),
                rs.getInt("time_spent"),
                rs.getString("epic")
            };
            model.addRow(row);
        }
    }

} catch (SQLException e) {
    e.printStackTrace();
}
