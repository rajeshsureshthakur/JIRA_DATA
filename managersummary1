import javax.swing.*;
import javax.swing.table.*;
import java.awt.*;
import java.sql.*;
import java.time.LocalDate;
import java.time.temporal.ChronoUnit;
import java.util.*;

public class ManagerRAGSummary extends JFrame {

    private JTable table;
    private DefaultTableModel model;
    private JComboBox<String> filterBox;

    public ManagerRAGSummary() {
        setTitle("Manager Summary View");
        setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        setSize(800, 400);
        setLocationRelativeTo(null);

        String[] columns = {"Assignee", "Green", "Amber", "Red", "Not Started"};
        model = new DefaultTableModel(columns, 0);
        table = new JTable(model);

        JScrollPane scrollPane = new JScrollPane(table);

        // Filter dropdown
        filterBox = new JComboBox<>(new String[]{"All", "Green", "Amber", "Red", "Not Started"});
        filterBox.addActionListener(e -> applyFilter());

        JPanel topPanel = new JPanel(new FlowLayout(FlowLayout.LEFT));
        topPanel.add(new JLabel("Filter by RAG:"));
        topPanel.add(filterBox);

        add(topPanel, BorderLayout.NORTH);
        add(scrollPane, BorderLayout.CENTER);

        // Add custom cell renderer
        addColorRenderer();

        loadData();
    }

    private void loadData() {
        Map<String, int[]> assigneeRagMap = new HashMap<>();

        String url = "jdbc:your_database_url";
        String username = "your_db_user";
        String password = "your_db_password";

        String query = "SELECT assignee, start_date, end_date FROM statushistory";

        try (Connection conn = DriverManager.getConnection(url, username, password);
             Statement stmt = conn.createStatement();
             ResultSet rs = stmt.executeQuery(query)) {

            while (rs.next()) {
                String assignee = rs.getString("assignee");
                LocalDate start = rs.getDate("start_date") != null ? rs.getDate("start_date").toLocalDate() : null;
                LocalDate end = rs.getDate("end_date") != null ? rs.getDate("end_date").toLocalDate() : null;

                String ragStatus;
                if (start == null && end == null) {
                    ragStatus = "Not Started";
                } else {
                    if (end == null) end = LocalDate.now();
                    long days = ChronoUnit.DAYS.between(start, end);
                    if (days < 4) ragStatus = "Green";
                    else if (days <= 6) ragStatus = "Amber";
                    else ragStatus = "Red";
                }

                assigneeRagMap.putIfAbsent(assignee, new int[4]);
                switch (ragStatus) {
                    case "Green" -> assigneeRagMap.get(assignee)[0]++;
                    case "Amber" -> assigneeRagMap.get(assignee)[1]++;
                    case "Red" -> assigneeRagMap.get(assignee)[2]++;
                    case "Not Started" -> assigneeRagMap.get(assignee)[3]++;
                }
            }

            for (Map.Entry<String, int[]> entry : assigneeRagMap.entrySet()) {
                int[] counts = entry.getValue();
                model.addRow(new Object[]{
                    entry.getKey(), counts[0], counts[1], counts[2], counts[3]
                });
            }

        } catch (SQLException ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error fetching data: " + ex.getMessage());
        }
    }

    private void applyFilter() {
        String selected = (String) filterBox.getSelectedItem();
        TableRowSorter<DefaultTableModel> sorter = new TableRowSorter<>(model);
        table.setRowSorter(sorter);

        if (!"All".equals(selected)) {
            sorter.setRowFilter(new RowFilter<DefaultTableModel, Integer>() {
                @Override
                public boolean include(Entry<? extends DefaultTableModel, ? extends Integer> entry) {
                    int index = switch (selected) {
                        case "Green" -> 1;
                        case "Amber" -> 2;
                        case "Red" -> 3;
                        case "Not Started" -> 4;
                        default -> -1;
                    };
                    return Integer.parseInt(entry.getStringValue(index)) > 0;
                }
            });
        } else {
            sorter.setRowFilter(null);
        }
    }

    private void addColorRenderer() {
        table.setDefaultRenderer(Object.class, new DefaultTableCellRenderer() {
            Color lightGreen = new Color(198, 239, 206);
            Color darkGreen = new Color(0, 97, 0);
            Color lightAmber = new Color(255, 235, 156);
            Color darkAmber = new Color(156, 101, 0);
            Color lightRed = new Color(255, 199, 206);
            Color darkRed = new Color(156, 0, 6);
            Color lightGray = new Color(230, 230, 230);
            Color darkGray = Color.DARK_GRAY;

            @Override
            public Component getTableCellRendererComponent(JTable table, Object value,
                                                           boolean isSelected, boolean hasFocus,
                                                           int row, int column) {
                Component c = super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);
                c.setForeground(Color.BLACK);
                c.setBackground(Color.WHITE);

                if (column >= 1 && column <= 4) {
                    try {
                        int count = Integer.parseInt(value.toString());
                        if (count > 0) {
                            switch (column) {
                                case 1 -> { // Green
                                    c.setForeground(darkGreen);
                                    c.setBackground(lightGreen);
                                }
                                case 2 -> { // Amber
                                    c.setForeground(darkAmber);
                                    c.setBackground(lightAmber);
                                }
                                case 3 -> { // Red
                                    c.setForeground(darkRed);
                                    c.setBackground(lightRed);
                                }
                                case 4 -> { // Not Started
                                    c.setForeground(darkGray);
                                    c.setBackground(lightGray);
                                }
                            }
                        }
                    } catch (NumberFormatException ignored) {}
                }

                return c;
            }
        });
    }

    public static void main(String[] args) {
        SwingUtilities.invokeLater(() -> new ManagerRAGSummary().setVisible(true));
    }
}
