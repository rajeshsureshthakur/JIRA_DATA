// Rewritten: dual-table view with separate models for frozen first column
private void loadHealthAnalyzerView() {
    DefaultTableModel fixedModel = new DefaultTableModel();
    DefaultTableModel scrollModel = new DefaultTableModel();

    List<String> fullDates = getLastNWeekdays(45);
    List<String> shortDates = fullDates.stream()
        .map(d -> LocalDate.parse(d).format(DateTimeFormatter.ofPattern("dd-MM")))
        .collect(Collectors.toList());

    fixedModel.setColumnIdentifiers(new String[]{"Key"});
    List<String> scrollHeaders = new ArrayList<>(shortDates);
    scrollHeaders.add("Row Total");
    scrollModel.setColumnIdentifiers(scrollHeaders.toArray());

    Map<String, Map<String, Double>> keyDateHoursMap = new LinkedHashMap<>();
    Map<String, Double> columnTotals = new HashMap<>();

    for (Object[] row : originalData) {
        String key = row[0].toString();
        int seconds = (int) row[2];
        double hours = seconds / 3600.0;
        String[] dates = row[3].toString().split(",");

        Map<String, Double> dateHours = keyDateHoursMap.computeIfAbsent(key, k -> new HashMap<>());
        for (String date : dates) {
            if (fullDates.contains(date)) {
                dateHours.put(date, dateHours.getOrDefault(date, 0.0) + hours);
                columnTotals.put(date, columnTotals.getOrDefault(date, 0.0) + hours);
            }
        }
    }

    for (Map.Entry<String, Map<String, Double>> entry : keyDateHoursMap.entrySet()) {
        String key = entry.getKey();
        Map<String, Double> dateHours = entry.getValue();
        fixedModel.addRow(new Object[]{key});

        List<Object> scrollRow = new ArrayList<>();
        double rowTotal = 0.0;
        for (String fullDate : fullDates) {
            double val = dateHours.getOrDefault(fullDate, 0.0);
            scrollRow.add(String.format("%.2f", val));
            rowTotal += val;
        }
        scrollRow.add(String.format("%.2f", rowTotal));
        scrollModel.addRow(scrollRow.toArray());
    }

    List<Object> totalRow = new ArrayList<>();
    double grandTotal = 0.0;
    for (String fullDate : fullDates) {
        double total = columnTotals.getOrDefault(fullDate, 0.0);
        totalRow.add(String.format("%.2f", total));
        grandTotal += total;
    }
    totalRow.add(String.format("%.2f", grandTotal));
    fixedModel.addRow(new Object[]{"Column Total"});
    scrollModel.addRow(totalRow.toArray());

    JTable fixedTable = new JTable(fixedModel) {
        @Override public boolean isCellEditable(int row, int column) { return false; }
    };

    JTable scrollTable = new JTable(scrollModel) {
        @Override public boolean isCellEditable(int row, int column) { return false; }
    };

    fixedTable.setPreferredScrollableViewportSize(new Dimension(120, fixedTable.getPreferredSize().height));
    fixedTable.setDefaultRenderer(Object.class, getCustomRenderer());
    scrollTable.setDefaultRenderer(Object.class, getCustomRenderer());

    JScrollPane scrollPane = new JScrollPane(scrollTable);
    scrollPane.setRowHeaderView(fixedTable);
    scrollPane.setCorner(JScrollPane.UPPER_LEFT_CORNER, fixedTable.getTableHeader());

    removeAll();
    add(scrollPane, BorderLayout.CENTER);
    revalidate();
    repaint();
}
