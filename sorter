sorter.setComparator(5, (s1, s2) -> {
    try {
        int val1 = (s1 == null || s1.toString().trim().isEmpty()) ? 0 : Integer.parseInt(s1.toString());
        int val2 = (s2 == null || s2.toString().trim().isEmpty()) ? 0 : Integer.parseInt(s2.toString());
        return Integer.compare(val1, val2);
    } catch (NumberFormatException e) {
        return 0;
    }
});


DefaultTableCellRenderer zeroIfNullRenderer = new DefaultTableCellRenderer() {
    @Override
    public void setValue(Object value) {
        if (value == null || value.toString().trim().isEmpty()) {
            super.setValue("0");
        } else {
            super.setValue(value.toString());
        }
    }
};


table.getColumnModel().getColumn(5).setCellRenderer(zeroIfNullRenderer);

DefaultTableCellRenderer hoursRenderer = new DefaultTableCellRenderer() {
    {
        setHorizontalAlignment(SwingConstants.CENTER);
    }

    @Override
    public void setValue(Object value) {
        try {
            int seconds = (value == null || value.toString().trim().isEmpty()) ? 0 : Integer.parseInt(value.toString().trim());
            double hours = seconds / 3600.0;
            super.setValue(String.format("%.2f", hours)); // display with 2 decimal places
        } catch (NumberFormatException e) {
            super.setValue("0.00");
        }
    }
};


table.addMouseListener(new MouseAdapter() {
    public void mouseClicked(MouseEvent e) {
        if (e.getClickCount() == 2) { // double click
            int selectedRow = table.getSelectedRow();
            if (selectedRow != -1) {
                // Fetch values with null checks
                String key = getSafeValue(table, selectedRow, 0);
                String summary = getSafeValue(table, selectedRow, 1);
                String status = getSafeValue(table, selectedRow, 2);
                String art = getSafeValue(table, selectedRow, 3);
                String timeSpent = getSafeValue(table, selectedRow, 4);
                String epic = getSafeValue(table, selectedRow, 5);

                // Open detail window
                new DetailWindow(key, summary, status, art, timeSpent, epic);
            }
        }
    }
});

// Utility method
private String getSafeValue(JTable table, int row, int col) {
    Object val = table.getValueAt(row, col);
    return (val != null) ? val.toString() : "0";  // default to "0" for nulls
}


Object timeSpentObj = table.getValueAt(selectedRow, 4);
                String timeSpent = (timeSpentObj != null) ? timeSpentObj.toString() : "0";



updateButton.addActionListener(e -> {
    int selectedRow = table.getSelectedRow();
    if (selectedRow != -1) {
        String updatedTimeSpent = timeSpentTextField.getText().trim(); // assuming this is your input field

        // Immediately update the table to show new value
        DefaultTableModel model = (DefaultTableModel) table.getModel();
        model.setValueAt(updatedTimeSpent, selectedRow, 4); // 4 = Time Spent column index

        // Optional: convert to seconds if needed for backend
        int seconds = (int)(Double.parseDouble(updatedTimeSpent) * 3600);

        // Run backend update in new thread
        String key = table.getValueAt(selectedRow, 0).toString(); // assuming key is in column 0

        new Thread(() -> {
            updateTimeSpentInJiraAndDB(key, seconds);
        }).start();
    }
});

                
