import javax.swing.*;
import java.awt.*;
import java.awt.event.*;
import java.io.File;
import java.io.IOException;
import java.nio.file.*;
import java.text.SimpleDateFormat;
import java.util.Date;

public class RequirementMappingUI {
    private JFrame frame;
    private JComboBox<String> dropdown;
    private JButton generateExcelButton, downloadButton, uploadButton, mapButton, backButton;
    private JLabel statusLabel, filePathLabel, autoInfoLabel;
    private File excelFile;
    private String releaseId = "R123"; // Sample release ID
    private String uploadedFilePath = "";

    public RequirementMappingUI() {
        frame = new JFrame("Requirement Mapping");
        frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        frame.setSize(700, 500);
        frame.setLayout(null);

        JLabel dropdownLabel = new JLabel("Select Requirement Mapping Type:");
        dropdownLabel.setBounds(30, 30, 300, 25);
        frame.add(dropdownLabel);

        dropdown = new JComboBox<>(new String[]{"Select Type", "Manual", "Automatic"});
        dropdown.setBounds(340, 30, 150, 25);
        frame.add(dropdown);

        autoInfoLabel = new JLabel("As you have chosen automatic, all requirements will be automatically mapped to your progression test cases only. If you want to map selective requirements or test cases, select manual mode.");
        autoInfoLabel.setForeground(Color.BLUE);
        autoInfoLabel.setVisible(false);
        autoInfoLabel.setBounds(30, 80, 620, 40);
        frame.add(autoInfoLabel);

        statusLabel = new JLabel("");
        statusLabel.setBounds(30, 130, 600, 20);
        frame.add(statusLabel);

        filePathLabel = new JLabel("");
        filePathLabel.setForeground(Color.BLUE);
        filePathLabel.setBounds(30, 150, 600, 20);
        frame.add(filePathLabel);

        generateExcelButton = new JButton("Generate Excel");
        generateExcelButton.setBounds(30, 180, 150, 30);
        generateExcelButton.setVisible(false);
        frame.add(generateExcelButton);

        downloadButton = new JButton("Download Excel");
        downloadButton.setBounds(30, 220, 150, 30);
        downloadButton.setVisible(false);
        frame.add(downloadButton);

        uploadButton = new JButton("Upload Excel");
        uploadButton.setBounds(200, 220, 150, 30);
        uploadButton.setVisible(false);
        frame.add(uploadButton);

        mapButton = new JButton("Map Requirements");
        mapButton.setBounds(30, 280, 150, 30);
        mapButton.setVisible(false);
        frame.add(mapButton);

        backButton = new JButton("Back");
        backButton.setBounds(200, 280, 150, 30);
        frame.add(backButton);

        dropdown.addActionListener(e -> handleDropdownSelection());
        generateExcelButton.addActionListener(e -> generateExcel());
        uploadButton.addActionListener(e -> uploadExcel());
        downloadButton.addActionListener(e -> downloadExcel());
        mapButton.addActionListener(e -> mapRequirements());
        backButton.addActionListener(e -> frame.dispose());

        frame.setVisible(true);
    }

    private void handleDropdownSelection() {
        String selection = (String) dropdown.getSelectedItem();
        autoInfoLabel.setVisible(false);
        generateExcelButton.setVisible(false);
        downloadButton.setVisible(false);
        uploadButton.setVisible(false);
        mapButton.setVisible(false);
        statusLabel.setText("");
        filePathLabel.setText("");

        if ("Manual".equals(selection)) {
            generateExcelButton.setVisible(true);
        } else if ("Automatic".equals(selection)) {
            autoInfoLabel.setVisible(true);
            mapButton.setVisible(true);
        }
    }

    private void generateExcel() {
        String fileName = "Map_Template_" + releaseId + ".xlsx";
        excelFile = new File(System.getProperty("user.home") + File.separator + fileName);
        new Thread(() -> {
            try {
                Thread.sleep(3000);
                Files.write(excelFile.toPath(), "Excel Template Content".getBytes());
                SwingUtilities.invokeLater(() -> {
                    statusLabel.setText("Excel file generated successfully at below path:");
                    filePathLabel.setText(excelFile.getAbsolutePath());
                    downloadButton.setVisible(true);
                    uploadButton.setVisible(true);
                });
            } catch (IOException | InterruptedException e) {
                e.printStackTrace();
            }
        }).start();
    }

    private void downloadExcel() {
        try {
            Desktop.getDesktop().open(excelFile);
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private void uploadExcel() {
        JFileChooser fileChooser = new JFileChooser();
        int option = fileChooser.showOpenDialog(frame);
        if (option == JFileChooser.APPROVE_OPTION) {
            File selectedFile = fileChooser.getSelectedFile();
            uploadedFilePath = selectedFile.getAbsolutePath();
            JOptionPane.showMessageDialog(frame, "Uploaded file: " + uploadedFilePath);
            mapButton.setVisible(true);
        }
    }

    private void mapRequirements() {
        JOptionPane.showMessageDialog(frame, "Mapping requirements using file: " + uploadedFilePath);
        String timestamp = new SimpleDateFormat("dd-HH-mm").format(new Date());
        File renamed = new File(excelFile.getParent(), "Map_Template_" + releaseId + "_" + timestamp + ".xlsx");
        excelFile.renameTo(renamed);
    }

    public static void main(String[] args) {
        SwingUtilities.invokeLater(RequirementMappingUI::new);
    }
}
