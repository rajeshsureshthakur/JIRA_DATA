import javax.swing.*;
import java.awt.*;
import java.awt.event.*;
import java.sql.*;
import java.util.ArrayList;
import java.util.List;

public class ReleaseSelectionScreen {
    private JFrame frame;
    private JComboBox<String> releaseComboBox, actionComboBox;  // Added action comboBox
    private JButton actionButton;
    private String url = "jdbc:your_database_url";
    private String username = "your_db_user";
    private String password = "your_db_password";

    public static void main(String[] args) {
        EventQueue.invokeLater(() -> {
            try {
                ReleaseSelectionScreen window = new ReleaseSelectionScreen();
                window.frame.setVisible(true);
            } catch (Exception e) {
                e.printStackTrace();
            }
        });
    }

    public ReleaseSelectionScreen() {
        frame = new JFrame();
        frame.setBounds(100, 100, 500, 300);
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.getContentPane().setLayout(new BorderLayout());

        // Panel for drop-downs and buttons
        JPanel topPanel = new JPanel(new FlowLayout(FlowLayout.LEFT, 10, 10));

        // Initialize components
        releaseComboBox = new JComboBox<>();
        actionComboBox = new JComboBox<>(new String[]{"Select Action", "Add Release", "Delete Release", "Mark Active", "Mark Non Active"});
        actionButton = new JButton("Perform Action");

        // Add the combo box and buttons to the panel
        topPanel.add(releaseComboBox);
        topPanel.add(actionComboBox);
        topPanel.add(actionButton);

        // Add the top panel to the frame
        frame.getContentPane().add(topPanel, BorderLayout.NORTH);

        // Load and display current releases by default
        loadReleases("current_releases");

        // Action listener for actionComboBox
        actionComboBox.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                String selectedAction = (String) actionComboBox.getSelectedItem();
                String selectedRelease = (String) releaseComboBox.getSelectedItem();

                if ("Add Release".equals(selectedAction)) {
                    showAddReleasePopup();
                } else if ("Delete Release".equals(selectedAction)) {
                    deleteRelease(selectedRelease);
                    loadReleases("current_releases");
                } else if ("Mark Active".equals(selectedAction)) {
                    if (!"Previous Releases".equals(selectedRelease)) {
                        updateReleaseStatus(selectedRelease, "current_releases");
                        loadReleases("current_releases");
                    }
                } else if ("Mark Non Active".equals(selectedAction)) {
                    if (!"Current Releases".equals(selectedRelease)) {
                        updateReleaseStatus(selectedRelease, "previous_releases");
                        loadReleases("previous_releases");
                    }
                }
            }
        });
    }

    private void loadReleases(String releaseType) {
        List<String> releases = getReleasesFromDatabase(releaseType);

        // Clear the combo box before populating it again
        releaseComboBox.removeAllItems();

        // Add "Select Release" as the default option
        releaseComboBox.addItem("Select Release");

        // Add releases from the selected type (current or previous releases)
        for (String release : releases) {
            releaseComboBox.addItem(release);
        }

        // Add the "Previous Releases" or "Current Releases" as the last option
        if ("current_releases".equals(releaseType)) {
            releaseComboBox.addItem("Previous Releases");
        } else {
            releaseComboBox.addItem("Current Releases");
        }

        // Enable the combo box and action button
        releaseComboBox.setEnabled(true);
        actionButton.setEnabled(true);

        // Disable action buttons as per the current view
        updateActionButtonForReleaseType(releaseType);
    }

    private void updateActionButtonForReleaseType(String releaseType) {
        String selectedRelease = (String) releaseComboBox.getSelectedItem();
        if ("current_releases".equals(releaseType)) {
            // Disable "Mark Active" if current release is selected
            actionComboBox.removeItem("Mark Active");
            actionComboBox.addItem("Mark Active");

        } else if ("previous_releases".equals(releaseType)) {
            // Disable "Mark Non Active" if previous release is selected
            actionComboBox.removeItem("Mark Non Active");
            actionComboBox.addItem("Mark Non Active");
        }
    }

    private List<String> getReleasesFromDatabase(String releaseType) {
        List<String> releases = new ArrayList<>();
        String query = "SELECT " + releaseType + " FROM jirareleases";

        try (Connection conn = DriverManager.getConnection(url, username, password);
             Statement stmt = conn.createStatement();
             ResultSet rs = stmt.executeQuery(query)) {

            while (rs.next()) {
                String release = rs.getString(1); // Assuming the release column is the first column in the result
                releases.add(release);
            }
        } catch (SQLException ex) {
            ex.printStackTrace();
        }
        return releases;
    }

    private void showAddReleasePopup() {
        // Create a dialog for adding a release
        JDialog addReleaseDialog = new JDialog(frame, "Add Jira Release", true);
        addReleaseDialog.setSize(300, 200);
        addReleaseDialog.setLayout(new FlowLayout());

        // Label and input text box for release name
        JLabel releaseLabel = new JLabel("Add Jira Release:");
        JTextField releaseNameField = new JTextField(15);

        // Label and dropdown for release status
        JLabel statusLabel = new JLabel("Release Status:");
        JComboBox<String> statusComboBox = new JComboBox<>(new String[]{"Active release", "Non Active Release"});

        // Submit and cancel buttons
        JButton submitButton = new JButton("Submit");
        JButton cancelButton = new JButton("Cancel");

        submitButton.addActionListener(e -> {
            String releaseName = releaseNameField.getText().trim();
            String status = (String) statusComboBox.getSelectedItem();
            if (!releaseName.isEmpty() && status != null) {
                addReleaseToDatabase(releaseName, status);
                addReleaseDialog.dispose();
                loadReleases("current_releases");
            }
        });

        cancelButton.addActionListener(e -> addReleaseDialog.dispose());

        // Add components to dialog
        addReleaseDialog.add(releaseLabel);
        addReleaseDialog.add(releaseNameField);
        addReleaseDialog.add(statusLabel);
        addReleaseDialog.add(statusComboBox);
        addReleaseDialog.add(submitButton);
        addReleaseDialog.add(cancelButton);

        // Show the dialog
        addReleaseDialog.setLocationRelativeTo(frame);
        addReleaseDialog.setVisible(true);
    }

    private void addReleaseToDatabase(String releaseName, String status) {
        String column = "Non Active Release".equals(status) ? "previous_releases" : "current_releases";
        String query = "UPDATE jirareleases SET " + column + " = ? WHERE release_name IS NULL";

        try (Connection conn = DriverManager.getConnection(url, username, password);
             PreparedStatement stmt = conn.prepareStatement(query)) {

            stmt.setString(1, releaseName);
            int rowsAffected = stmt.executeUpdate();
            if (rowsAffected > 0) {
                JOptionPane.showMessageDialog(frame, "Release added successfully.");
            }
        } catch (SQLException ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(frame, "Error adding release: " + ex.getMessage());
        }
    }

    private void updateReleaseStatus(String release, String statusColumn) {
        String query = "UPDATE jirareleases SET " + statusColumn + " = ? WHERE " + statusColumn + " = ?";

        try (Connection conn = DriverManager.getConnection(url, username, password);
             PreparedStatement stmt = conn.prepareStatement(query)) {

            stmt.setString(1, release);
            stmt.setString(2, release);
            int rowsAffected = stmt.executeUpdate();
            if (rowsAffected > 0) {
                JOptionPane.showMessageDialog(frame, "Release status updated successfully.");
            }
        } catch (SQLException ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(frame, "Error updating release status: " + ex.getMessage());
        }
    }

    private void deleteRelease(String release) {
        String query = "DELETE FROM jirareleases WHERE current_releases = ? OR previous_releases = ?";

        try (Connection conn = DriverManager.getConnection(url, username, password);
             PreparedStatement stmt = conn.prepareStatement(query)) {

            stmt.setString(1, release);
            stmt.setString(2, release);
            int rowsAffected = stmt.executeUpdate();
            if (rowsAffected > 0) {
                JOptionPane.showMessageDialog(frame, "Release deleted successfully.");
            }
        } catch (SQLException ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(frame, "Error deleting release: " + ex.getMessage());
        }
    }
}
