import javax.swing.*;
import java.awt.*;
import java.awt.event.*;
import java.sql.*;
import java.util.ArrayList;
import java.util.List;

public class ReleaseSelectionScreen {
    private JFrame frame;
    private JComboBox<String> releaseComboBox;
    private JButton markButton, deleteButton;  // Added buttons
    private String url = "jdbc:your_database_url";
    private String username = "your_db_user";
    private String password = "your_db_password";

    public static void main(String[] args) {
        EventQueue.invokeLater(() -> {
            try {
                ReleaseSelectionScreen window = new ReleaseSelectionScreen();
                window.frame.setVisible(true);
            } catch (Exception e) {
                e.printStackTrace();
            }
        });
    }

    public ReleaseSelectionScreen() {
        frame = new JFrame();
        frame.setBounds(100, 100, 400, 200);
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.getContentPane().setLayout(new FlowLayout());

        // Initialize comboBox and buttons
        releaseComboBox = new JComboBox<>();
        markButton = new JButton("Mark Non Active");  // Default text
        deleteButton = new JButton("Delete");

        // Add the combo box and buttons to the frame
        frame.getContentPane().add(releaseComboBox);
        frame.getContentPane().add(markButton);
        frame.getContentPane().add(deleteButton);

        // Load and display current releases by default
        loadReleases("current_releases");

        // Add an action listener for combo box selection
        releaseComboBox.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                String selectedRelease = (String) releaseComboBox.getSelectedItem();
                if ("Previous Releases".equals(selectedRelease)) {
                    loadReleases("previous_releases");
                    markButton.setText("Mark Active");
                } else if ("Current Releases".equals(selectedRelease)) {
                    loadReleases("current_releases");
                    markButton.setText("Mark Non Active");
                } else {
                    // Enable other actions based on selection
                    enableButtons();
                }
            }
        });

        // Mark button action listener
        markButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                String selectedRelease = (String) releaseComboBox.getSelectedItem();
                if ("Mark Non Active".equals(markButton.getText())) {
                    // Move selected release to previous_releases column
                    updateReleaseStatus(selectedRelease, "previous_releases");
                    loadReleases("previous_releases");
                    markButton.setText("Mark Active");
                } else if ("Mark Active".equals(markButton.getText())) {
                    // Move selected release to current_releases column
                    updateReleaseStatus(selectedRelease, "current_releases");
                    loadReleases("current_releases");
                    markButton.setText("Mark Non Active");
                }
            }
        });

        // Delete button action listener
        deleteButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                String selectedRelease = (String) releaseComboBox.getSelectedItem();
                deleteRelease(selectedRelease);
                loadReleases("current_releases");  // Refresh list after deletion
            }
        });
    }

    private void loadReleases(String releaseType) {
        List<String> releases = getReleasesFromDatabase(releaseType);

        // Clear the combo box before populating it again
        releaseComboBox.removeAllItems();

        // Add "Select Release" as the default option
        releaseComboBox.addItem("Select Release");

        // Add releases from the selected type (current or previous releases)
        for (String release : releases) {
            releaseComboBox.addItem(release);
        }

        // Add the "Previous Releases" or "Current Releases" as the last option
        if ("current_releases".equals(releaseType)) {
            releaseComboBox.addItem("Previous Releases");
        } else {
            releaseComboBox.addItem("Current Releases");
        }

        // Enable or disable the action button based on the selection
        releaseComboBox.setEnabled(true);
        markButton.setEnabled(true);
        deleteButton.setEnabled(true);
    }

    private List<String> getReleasesFromDatabase(String releaseType) {
        List<String> releases = new ArrayList<>();
        String query = "SELECT " + releaseType + " FROM jirareleases";

        try (Connection conn = DriverManager.getConnection(url, username, password);
             Statement stmt = conn.createStatement();
             ResultSet rs = stmt.executeQuery(query)) {

            while (rs.next()) {
                String release = rs.getString(1); // Assuming the release column is the first column in the result
                releases.add(release);
            }
        } catch (SQLException ex) {
            ex.printStackTrace();
        }
        return releases;
    }

    private void updateReleaseStatus(String release, String statusColumn) {
        String query = "UPDATE jirareleases SET " + statusColumn + " = ? WHERE " + statusColumn + " = ?";

        try (Connection conn = DriverManager.getConnection(url, username, password);
             PreparedStatement stmt = conn.prepareStatement(query)) {

            stmt.setString(1, release);
            stmt.setString(2, release);
            int rowsAffected = stmt.executeUpdate();
            if (rowsAffected > 0) {
                JOptionPane.showMessageDialog(frame, "Release status updated successfully.");
            }
        } catch (SQLException ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(frame, "Error updating release status: " + ex.getMessage());
        }
    }

    private void deleteRelease(String release) {
        String query = "DELETE FROM jirareleases WHERE current_releases = ? OR previous_releases = ?";

        try (Connection conn = DriverManager.getConnection(url, username, password);
             PreparedStatement stmt = conn.prepareStatement(query)) {

            stmt.setString(1, release);
            stmt.setString(2, release);
            int rowsAffected = stmt.executeUpdate();
            if (rowsAffected > 0) {
                JOptionPane.showMessageDialog(frame, "Release deleted successfully.");
            }
        } catch (SQLException ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(frame, "Error deleting release: " + ex.getMessage());
        }
    }

    private void enableButtons() {
        markButton.setEnabled(true);
        deleteButton.setEnabled(true);
    }
}
