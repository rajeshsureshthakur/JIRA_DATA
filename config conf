startButton.addActionListener(new ActionListener() {
    @Override
    public void actionPerformed(ActionEvent e) {
        // Step 1: Prepare a text field with today's date
        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd");
        String today = LocalDate.now().format(formatter);
        JTextField endDateField = new JTextField(today, 10);

        // Step 2: Show it in an input dialog
        int result = JOptionPane.showConfirmDialog(
            null,
            new Object[] { "Please enter tentative end date (YYYY-MM-DD):", endDateField },
            "Enter End Date",
            JOptionPane.OK_CANCEL_OPTION
        );

        // Step 3: Handle user input
        if (result == JOptionPane.OK_OPTION) {
            String endDate = endDateField.getText().trim();

            // Basic validation
            if (endDate.matches("\\d{4}-\\d{2}-\\d{2}")) {
                // Proceed with DB update
                updateProjectInDB(projectId, endDate);
            } else {
                JOptionPane.showMessageDialog(null, "Invalid date format. Please use YYYY-MM-DD.");
            }
        } else {
            JOptionPane.showMessageDialog(null, "End date entry cancelled.");
        }
    }
});





startButton.addActionListener(new ActionListener() {
    @Override
    public void actionPerformed(ActionEvent e) {
        // Step 1: Prompt the user for the end date
        String endDate = JOptionPane.showInputDialog(
            null,
            "Please enter tentative end date (YYYY-MM-DD):",
            "Enter End Date",
            JOptionPane.QUESTION_MESSAGE
        );

        // Step 2: Check if user canceled or left it blank
        if (endDate == null || endDate.trim().isEmpty()) {
            JOptionPane.showMessageDialog(null, "End date is required to proceed.");
            return;
        }

        // Optional: You can validate the date format here
        if (!endDate.matches("\\d{4}-\\d{2}-\\d{2}")) {
            JOptionPane.showMessageDialog(null, "Please enter date in YYYY-MM-DD format.");
            return;
        }

        // Step 3: Proceed with your existing DB logic, passing the endDate
        // Example: updateProjectStatus(projectId, "Started", endDate);
        updateProjectInDB(projectId, endDate);
    }
});

// Sample DB update method
public void updateProjectInDB(String projectId, String endDate) {
    // Your existing DB update logic here
    // Just include the endDate in your UPDATE statement
    String sql = "UPDATE projects SET status = ?, tentative_end_date = ? WHERE project_id = ?";
    
    try (PreparedStatement pstmt = connection.prepareStatement(sql)) {
        pstmt.setString(1, "Started");
        pstmt.setString(2, endDate);
        pstmt.setString(3, projectId);
        pstmt.executeUpdate();
    } catch (SQLException ex) {
        ex.printStackTrace();
    }
}





JButton addTeamButton = new JButton("Add Team");
addTeamButton.addActionListener(e -> showAddTeamDialog());

gbc.gridx = 2;
add(addTeamButton, gbc);

private void showAddTeamDialog() {
    JDialog dialog = new JDialog(this, "Add New Team", true);
    dialog.setSize(400, 250);
    dialog.setLayout(new GridBagLayout());
    dialog.setLocationRelativeTo(this);

    GridBagConstraints dgbc = new GridBagConstraints();
    dgbc.insets = new Insets(10, 10, 10, 10);
    dgbc.fill = GridBagConstraints.HORIZONTAL;

    JLabel teamLabel = new JLabel("Team Name:");
    JTextField teamField = new JTextField(20);

    JLabel pageIdLabel = new JLabel("Confluence Page ID:");
    JTextField pageIdField = new JTextField(20);

    JButton submitBtn = new JButton("Submit");
    JButton cancelBtn = new JButton("Back");

    // Submit Action
    submitBtn.addActionListener(e -> {
        String teamName = teamField.getText().trim();
        String pageId = pageIdField.getText().trim();

        if (teamName.isEmpty() || pageId.isEmpty()) {
            JOptionPane.showMessageDialog(dialog, "Both fields are required.");
            return;
        }

        try (PreparedStatement ps = conn.prepareStatement(
                "INSERT INTO teams (team_name, confluence_page_id) VALUES (?, ?)")) {
            ps.setString(1, teamName);
            ps.setString(2, pageId);
            ps.executeUpdate();

            JOptionPane.showMessageDialog(dialog, "Team added successfully.");
            dialog.dispose();
            loadTeams(); // refresh dropdown
        } catch (SQLException ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(dialog, "Error saving to DB.");
        }
    });

    cancelBtn.addActionListener(e -> dialog.dispose());

    // Add components to dialog
    dgbc.gridx = 0; dgbc.gridy = 0;
    dialog.add(teamLabel, dgbc);
    dgbc.gridx = 1;
    dialog.add(teamField, dgbc);

    dgbc.gridx = 0; dgbc.gridy = 1;
    dialog.add(pageIdLabel, dgbc);
    dgbc.gridx = 1;
    dialog.add(pageIdField, dgbc);

    dgbc.gridx = 0; dgbc.gridy = 2;
    dialog.add(submitBtn, dgbc);
    dgbc.gridx = 1;
    dialog.add(cancelBtn, dgbc);

    dialog.setVisible(true);
}











String selected = (String) teamDropdown.getSelectedItem();

    boolean valid = selected != null && !selected.equals("Select Team Name");

    releaseIdField.setEnabled(valid);
    releaseIdDropdown.setEnabled(valid);


private JComboBox<String> teamDropdown;

------

// TEAM selection
JLabel teamLabel = new JLabel("Team:");
gbc.gridx = 0; gbc.gridy = 0;
add(teamLabel, gbc);

teamDropdown = new JComboBox<>();
teamDropdown.setPreferredSize(new Dimension(200, 25));
loadTeams(); // populate teams

// Action: when team selected, filter STOP releases
teamDropdown.addActionListener(e -> {
    if (teamDropdown.getSelectedIndex() > 0) {  // skip "Select Team Name"
        loadReleaseIds();
    } else {
        releaseIdDropdown.removeAllItems(); // clear if "Select" is chosen
    }
});

gbc.gridx = 1;
add(teamDropdown, gbc);

------

private void loadTeams() {
    teamDropdown.removeAllItems();
    teamDropdown.addItem("Select Team Name");
    try (PreparedStatement ps = conn.prepareStatement("SELECT DISTINCT team_name FROM releases ORDER BY team_name");
         ResultSet rs = ps.executeQuery()) {
        while (rs.next()) {
            teamDropdown.addItem(rs.getString("team_name"));
        }
    } catch (SQLException e) {
        e.printStackTrace();
    }
}

------

private Map<String, String> releaseNameToIdMap = new HashMap<>();

private void loadReleaseIds() {
    releaseIdDropdown.removeAllItems();
    releaseNameToIdMap.clear();

    String selectedTeam = (String) teamDropdown.getSelectedItem();
    if (selectedTeam == null || selectedTeam.equals("Select Team Name")) {
        return;  // no team selected
    }

    try (PreparedStatement ps = conn.prepareStatement(
            "SELECT release_id, release_name FROM releases WHERE zephyr_flag = 'Y' AND team_name = ?")) {
        ps.setString(1, selectedTeam);
        try (ResultSet rs = ps.executeQuery()) {
            while (rs.next()) {
                String id = rs.getString("release_id");
                String name = rs.getString("release_name");
                releaseNameToIdMap.put(name, id);
                releaseIdDropdown.addItem(name);
            }
        }
    } catch (SQLException e) {
        e.printStackTrace();
    }
}


-------


String selectedTeam = (String) teamDropdown.getSelectedItem();
if (selectedTeam == null || selectedTeam.equals("Select Team Name")) {
    JOptionPane.showMessageDialog(this, "Please select a valid Team Name.");
    return;
}



